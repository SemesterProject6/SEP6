@inherits LayoutComponentBase
@using SEP6.Models;
@using SEP6.Data.Users;
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserService UserService

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <AuthorizeView>
           <NotAuthorized Context="NotAuth">
               <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Login" Href="/Login">Login</MudButton>
           </NotAuthorized>
            <Authorized>
                <MudButton Variant="Variant.Filled" Color="Color.Error" EndIcon="@Icons.Material.Filled.Logout" OnClick="Logout">Log out</MudButton>
            </Authorized>
        </AuthorizeView>
        <MudSpacer />
        <MudButton Variant="Variant.Text" Color="Color.Secondary" EndIcon="@Icons.Material.Filled.Home" Href="/">Home</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" EndIcon="@Icons.Material.Filled.TheaterComedy" Href="/Actors">Actors</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" EndIcon="@Icons.Material.Filled.LocalMovies" Href="/Movies">Movies</MudButton>
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudButton Variant="Variant.Filled" Color="Color.Error">@loggedUser.FirstName</MudButton>
            </Authorized>
        </AuthorizeView>
        <MudToggleIconButton @bind-Toggled="@_isDarkMode"
            Icon="@Icons.Material.Filled.Cloud" Color="@Color.Secondary" Title="On"
            ToggledIcon="@Icons.Material.Filled.WbSunny" ToggledColor="@Color.Tertiary" ToggledTitle="Off" />
    </MudAppBar>
    
    <MudMainContent>
        <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.ExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDarkMode;
    private User loggedUser;
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
        UserLogged();
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
    }

    public async Task Logout()
    {
        try
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).Logout();
            loggedUser = null;
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e) { }
    }

    public async Task UserLogged()
    {
        if (UserService.GetUserId() != 0)
        {
            loggedUser = await UserService.GetUserByID(UserService.GetUserId()).ConfigureAwait(false);
            StateHasChanged();
        }
    }


    MudTheme MyCustomTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = Colors.Blue.Default,
                Secondary = Colors.Green.Accent4,
                AppbarBackground = Colors.Red.Default,
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Colors.Blue.Lighten1
            }

        };
}