@page "/MoviesDetails/{Id}"
@using SEP6.Data.Actors;
@using SEP6.Data.Movies;
@using SEP6.Data.FavoriteMovie;
@using SEP6.Data.Users;
@using SEP6.Models;
@inject IActorService ActorService
@inject IMovieService MovieService
@inject IFavoriteMovieService FavoriteMovieService
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


@if (movie != null)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-4">
                <img src="@GetPoster(movie.PosterRoute)" class="img-fluid rounded-lg" alt="Movie Poster">
            </div>
            <div class="col-md-8">
                <div class="row">
                    <div class="col-md-11">
                            @if (@movie.Title == @movie.Original_Title)
                            {
                                <h4>@movie.Title</h4>
                            }
                            else
                            {
                                <h4>@movie.Title ( @movie.Original_Title )</h4>
                            }
                   </div>
                   <AuthorizeView>
                        <Authorized>
                            <div class="col-md-1">
                                <MudToggleIconButton @bind-Toggled="@isFavorite" @onclick="() => ToggleMovieFavorite()" Size="Size.Large"
                                                 Icon="@Icons.Material.Outlined.StarOutline" Title="Add" ToggledTitle="Remove"
                                                 ToggledIcon="@Icons.Material.Filled.Star" ToggledColor="Color.Primary" ToggledSize="Size.Large" />
                            </div>
                        </Authorized>
                    </AuthorizeView>
                </div>
                @{
                    DateTime releaseDate = DateTime.Parse(movie.ReleaseDate);
                    string formattedYear = releaseDate.ToString("yyyy");
                }
                <p>@releaseDate.ToString("MMMM dd, ")<span style="font-weight: bold;">@formattedYear</span></p>
                @foreach (var genre in movie.Genre)
                {
                    <MudChip Color="Color.Secondary">@genre.Name</MudChip>
                }
                <p>Rating: <span style="font-weight: bold;">@(movie.Rating * 10)</span>%, <span style="font-weight: bold;">@movie.NrOfVotes</span> Ratings</p>
                <p>@movie.Overview</p>
                @if (movie.Director != null)
                {
                    <div class="row mt-3">
                        <div class="col-md-12">
                            <h5>Director:</h5>
                            <p>@movie.Director.Name</p>
                        </div>
                    </div>
                }
                @if (videoList != null && videoList.videos != null && videoList.videos.Count > 0)
                {
                    <div class="mt-10">
                        <h5>Trailer:</h5>
                            @if (!string.IsNullOrEmpty(videoList.videos[0].Key))
                           {
                            <iframe width="560" height="560" src="https://www.youtube.com/embed/@videoList.videos[0].Key" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
                           }
                           else
                           {
                           <p>No video available.</p>
                           }
                    </div>
                }
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
            <h5 class="mt-5">Actors:</h5>
         <div class="d-flex justify-content-center">
               <div id="actorsCarousel" class="carousel slide" data-ride="carousel">
                   <div class="carousel-inner">
                       @for (var i = 0; i < Math.Ceiling((double)actors.Count / 6); i++)
                      {
                         <div class="carousel-item @(i == 0 ? "active" : "")">
                              <div class="row">
                                 @for (var j = i * 6; j < Math.Min((i * 6) + 6, actors.Count); j++)
                                  {
                                            <div class="col-md-2">
                                                <a href="/ActorsDetails/@actors[j].Id" class="text-decoration-none">
                                                    <div class="text-center">
                                                        @if (!string.IsNullOrEmpty(actors[j].ProfilePath))
                                                        {
                                                            <img src="@GetPoster(actors[j].ProfilePath)" class="img-fluid rounded-lg">
                                                        }
                                                        else
                                                        {
                                                            <img src="Images/defaultUserImage.jpg" class="img-fluid rounded-lg">
                                                        }
                                                        <h6 class="mt-3">@actors[j].Name</h6>
                                                    </div>
                                                </a>
                                            </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
       
        <div class="d-flex justify-content-center mt-3">
            <a class="carousel-control-prev" style="left:-165px" href="#actorsCarousel" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
                    <a class="carousel-control-next" style="right:-165px" href=" #actorsCarousel" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
            </div>
        </div>
    </div>
}
else
{
    <p>Movie details not found.</p>
}




@code {
    [Parameter]
    public string Id { get; set; }
    private Movie movie;
    private int movieId;
    private Credits credit;
    private List<Actor> actors = new List<Actor>();
    private Genre genre = new Genre();
    private VideoList videoList = new VideoList();
    private bool isFavorite = false;
    private CrewMember crewMember;


    protected override async Task OnInitializedAsync()
    {
        movieId = int.Parse(Id); // Parse the ID string to an integer
        movie = await GetMovie(movieId); // Call the GetMovie method with the movie ID
        videoList = await GetVideos(movieId);

        if (movie != null)
        {
            credit = await GetCreditsByMovie(movieId);
            isFavorite = await IsMovieFavorited();

            if (credit != null && credit.Actors != null)
            {
                actors.AddRange(credit.Actors);
            }
        }
    }

    private async Task<Movie> GetMovie(int id)
    {
        try
        {
            return await MovieService.GetMovieByID(id);
        }
        catch (Exception ex)
        {
            // Handle the exception or log the error
            Console.WriteLine($"Failed to get movie: {ex.Message}");
            return null;
        }
    }
    private async Task<VideoList> GetVideos(int id)
    {
        try
        {
            return await MovieService.GetVideosByMovieId(id);
        }
        catch (Exception ex)
        {
            // Handle the exception or log the error
            Console.WriteLine($"Failed to get movie videos: {ex.Message}");
            return null;
        }
    }

    private async Task<Credits> GetCreditsByMovie(int id)
    {
        try
        {
            return await MovieService.GetCreditsByMovieId(id);
        }
        catch (Exception ex)
        {
            // Handle the exception or log the error
            Console.WriteLine($"Failed to get movie credits: {ex.Message}");
            return null;
        }
    }

    public string GetPoster(string path)
    {
        string Poster = "http://image.tmdb.org/t/p/w500/";
        return Poster + path;
    }

    public async Task ActorSelected(int id)
    {
        ActorService.SetActorId(id);
    }

    private async Task<bool> IsMovieFavorited()
    {
        return await FavoriteMovieService.GetIsFavoriteMovieByID(UserService.GetUserId(), movieId);
    }

    private async Task ToggleMovieFavorite()
    {
        isFavorite = !isFavorite;
        if (isFavorite)
        {
            await FavoriteMovieService.AddFavoriteMovie(UserService.GetUserId(), movieId);
            StateHasChanged();
        }
        else
        {
            await FavoriteMovieService.RemoveFavoriteMovieByID(UserService.GetUserId(), movieId);
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initSlickCarousel");
        }
    }
}
