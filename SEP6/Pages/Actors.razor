@page "/Actors"
@using SEP6.Data.Actors;
@using SEP6.Models;
@inject IActorService ActorService
@inject NavigationManager NavigationManager

<h3>Popular actors</h3>
<input type="text" @bind="UserInput" />
<p>You entered: @UserInput</p>
<button @onclick="SubmitForm">Submit</button>
<MudGrid>
    <MudItem xs="12" md="2">
    </MudItem>
    <MudItem xs="12" md="10">
        @if (actorList?.Actors != null)
        {
            <MudGrid>
                @foreach (var actor in actorList.Actors)
                {
                    <MudItem xs="6" sm="4" md="3" xl="2">
                        <a href="/ActorsDetails/@actor.Id" class="text-decoration-none">
                            <MudCard Width="200px" style="cursor: pointer;">
                                <MudCardMedia Image="@GetActorPoster(actor.ProfilePath)" Height="300" />
                                <MudCardContent>
                                    <MudText Typo="Typo.h6">@actor.Name</MudText>
                                </MudCardContent>
                            </MudCard>
                        </a>
                    </MudItem>
                }
            </MudGrid>
        }
        @if (actorList?.CurrentPage < actorList?.TotalPages)
        {
            <div class="text-center mt-4">
                <button class="btn btn-primary" @onclick="LoadNextPage">Load More</button>
            </div>
        }
    </MudItem>
</MudGrid>

@code {
    private int currentPage = 1;
    private ListOfActors actorList;
    public int totalPages;
    private ListOfActors movieList = new ListOfActors();
    public string UserInput { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        actorList = new ListOfActors();
        await LoadActors();
    }

    public string GetActorPoster(string path)
    {
        if (string.IsNullOrEmpty(path))
        {
            return "Images/defaultUserImage.jpg";
        }
        string actorPoster = "http://image.tmdb.org/t/p/w500/";
        return actorPoster + path;
    }

    private async Task LoadActors()
    {
        if (string.IsNullOrEmpty(UserInput))
        {
            actorList = await ActorService.GetPopularActors(currentPage);
        }
        else
        {
            actorList = await ActorService.GetActorsBySearch(currentPage, UserInput);
        }
        StateHasChanged();
    }

    private async Task LoadNextPage()
    {
        currentPage++;
        if (string.IsNullOrEmpty(UserInput))
        {
            var nextPageActors = await ActorService.GetPopularActors(currentPage);
            actorList.Actors.AddRange(nextPageActors.Actors);
        }
        else
        {
            var nextPageActors = await ActorService.GetActorsBySearch(currentPage, UserInput);
            actorList.Actors.AddRange(nextPageActors.Actors);
        }
        StateHasChanged();
    }

    private async Task<ListOfActors> SearchActor(int page, string name)
    {
        var result = await ActorService.GetActorsBySearch(page, name);
        currentPage = result.CurrentPage;
        totalPages = result.TotalPages;
        return result;
    }

    private async Task SubmitForm()
    {
        currentPage = 1;
        await LoadActors();
    }
}
