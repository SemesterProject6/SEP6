@page "/Movies"
@using SEP6.Data.Movies;
@using SEP6.Models;
@inject IMovieService MovieService
@inject NavigationManager NavigationManager
<PageTitle>Movies</PageTitle>

<MudGrid Justify="Justify.Center" Style="align-items:center; display: flex;">
        <MudItem xs="3">
            <MudSelect T="FilterCat" Label="Filter" ValueChanged="ChangeMovieFilter" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@FilterCat.NowPlaying">Now Playing</MudSelectItem>
                <MudSelectItem Value="@FilterCat.Popular" >Popular</MudSelectItem>
                <MudSelectItem Value="@FilterCat.Upcomning">Upcoming</MudSelectItem>
             </MudSelect>
        </MudItem>
        <MudItem xs="6">
              <MudTextField @bind-Value="UserInput" Clearable="true" Label="Search" Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="3">
           <MudButton OnClick="@SubmitForm" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Search" Size="Size.Large" FullWidth="true" Color="Color.Primary">Search</MudButton>
        </MudItem>
    </MudGrid>
@if (movieList.Movies != null)
    {
        <MudItem xs="12">
            <MudGrid>
                @foreach (var m in movieList.Movies)
                {
                    <MudItem xs="6" md="3">
                        <MudCard style="cursor: pointer;" @onclick="() => MovieSelected(m.Id)">
                            <MudCardMedia Image="@GetMoviePoster(m.PosterRoute)" Height="300" />
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@m.Title</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
                <div class="d-flex flex-column align-center" style="margin:8px;">
            <MudPagination Color="Color.Primary" Count="@totalPages" @bind-Selected="@currentPage"  onchange="@SubmitForm()" />
            </div>
    </MudItem>
}
else
{
    <MudGrid Justify="Justify.Center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </MudGrid>
}

@code {

    private ListOfMovies movieList = new ListOfMovies();
    public string UserInput { get; set; } = "";
    public int currentPage = 1;
    public int totalPages;
    private FilterCat filterValue { get; set; } = FilterCat.NowPlaying;

    protected override async Task OnInitializedAsync()
    {
        movieList = await GetNowPlayingMovies(currentPage);
    }

    private async Task<Movie> GetMovie(int id)
    {
        var result = await MovieService.GetMovieByID(id);
        return result;
    }
    private async Task<ListOfMovies> SearchMovie(int page, string title)
    {
        var result = await MovieService.GetMoviesBySearch(page, title);
        currentPage = result.CurrentPage;
        totalPages = result.TotalPage;
        return result;
    }

    private async Task<ListOfMovies> GetNowPlayingMovies(int page)
    {
        try
        {
            var result = await MovieService.GetNowPlayingMovies(page);
            currentPage = result.CurrentPage;
            totalPages = result.TotalPage;
            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to get now playing movies: {ex.Message}");
            return null;
        }
    }

    private async Task<ListOfMovies> GetPopularMovies(int page)
    {
        try
        {
            var result = await MovieService.GetPopularMovies(page);
            currentPage = result.CurrentPage;
            totalPages = result.TotalPage;
            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to get popular movies: {ex.Message}");
            return null;
        }
    }

    private async Task<ListOfMovies> GetUpcomingMovies(int page)
    {
        try
        {
            var result = await MovieService.GetUpcomingMovies(page);
            currentPage = result.CurrentPage;
            totalPages = result.TotalPage;
            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to get upcoming movies: {ex.Message}");
            return null;
        }
    }

    private async Task ChangeMovieFilter(FilterCat filter)
    {
        switch (filter)
        {
            case FilterCat.NowPlaying:
                movieList = await GetNowPlayingMovies(currentPage);
                break;
            case FilterCat.Popular:
                movieList = await GetPopularMovies(currentPage);
                break;
            case FilterCat.Upcomning:
                movieList = await GetUpcomingMovies(currentPage);
                break;
            default:
                //
                break;
        }
    }


    private async Task SubmitForm()
    {
        if (UserInput == "") return;
        movieList = await SearchMovie(currentPage, UserInput);
    }

    public async Task MovieSelected(int id)
    {
        MovieService.SetMovieId(id);
        NavigationManager.NavigateTo($"/MoviesDetails/{id}");
    }

    public string GetMoviePoster(string path)
    {
        if (string.IsNullOrEmpty(path))
        {
            return "Images/NoImage.png";
        }
        string moviePoster = "http://image.tmdb.org/t/p/w500/";
        return moviePoster + path;
    }

    enum FilterCat
    {
        NowPlaying,
        Popular,
        Upcomning
    }

}
